<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <!-- Include the CesiumJS JavaScript and CSS files -->
  <script src="https://cesium.com/downloads/cesiumjs/releases/1.106/Build/Cesium/Cesium.js"></script>
  <link href="https://cesium.com/downloads/cesiumjs/releases/1.106/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
</head>
<style>
#timeSlider {
  width: 500px; /* Set your desired width here */
}
#myCanvas {
  position: absolute;
  top: 48%;
  left: 48%;
  z-index: 100;
  transform: rotate(0deg);
  display: none;
}
</style>
<body>
  <div id="cesiumContainer"></div>
  <input type="file" id="fileInput">
  <div id="controls">
    <button id="playButton" disabled>Play</button>
    <button id="pauseButton" disabled>Pause</button>
    <p id="displayTime"></p>
    <input type="range" id="timeSlider" min="0" max="100" value="0" step="1" disabled>
    <canvas id="myCanvas" width="100" height="100"></canvas>
  </div>
  <script>

    const canvas = document.getElementById("myCanvas");
    const ctx = canvas.getContext("2d");



    ctx.strokeStyle = 'red';
    ctx.lineWidth = 2;
    ctx.strokeRect(20, 80,10, 10);
    
    // Define a new path:
    ctx.beginPath();

    // Define a start point
    ctx.moveTo(20,80);

    // Define an end point
    ctx.lineTo(80,20);

    // Draw it
    ctx.stroke();

    // Define a new path:
    ctx.beginPath();

    // Define a start point
    ctx.moveTo(30,90);

    // Define an end point
    ctx.lineTo(90,30);

    // Draw it
    ctx.stroke();

    // Define a new path:
    ctx.beginPath();

    // Define a start point
    ctx.moveTo(30,80);

    // Define an end point
    ctx.lineTo(90,20);

    // Draw it
    ctx.stroke();

    // Define a new path:
    ctx.beginPath();

    // Define a start point
    ctx.moveTo(80,20);

    // Define an end point
    ctx.lineTo(90,20);

    // Draw it
    ctx.stroke();

    // Draw it
    ctx.stroke();

    // Define a new path:
    ctx.beginPath();

    // Define a start point
    ctx.moveTo(90,20);

    // Define an end point
    ctx.lineTo(90,30);

    // Draw it
    ctx.stroke();



    var x = 50; // X-coordinate of the top-left corner
    var y = 60; // Y-coordinate of the top-left corner
    var width = 40;
    var height = 10;
    ctx.fillStyle = 'red';
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + width, y); // Top-right corner
    ctx.lineTo(x + width - height / Math.tan(Math.PI / 4), y + height); // Bottom-right corner
    ctx.lineTo(x - height / Math.tan(Math.PI / 4), y + height); // Bottom-left corner
    ctx.closePath();
    ctx.fill(); // Fills the parallelogram with a color
    
    var x = 9; // X-coordinate of the top-left corner
    var y = 60; // Y-coordinate of the top-left corner
    var width = 30;
    var height = 10;

    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + width, y); // Top-right corner
    ctx.lineTo(x + width - height / Math.tan(Math.PI / 4), y + height); // Bottom-right corner
    ctx.lineTo(x - height / Math.tan(Math.PI / 4), y + height); // Bottom-left corner
    ctx.closePath();
    ctx.fill(); // Fills the parallelogram with a color
    
    var x = 250; // X-coordinate of the top-left corner
    var y = 100; // Y-coordinate of the top-left corner
    var width = 50;
    var height = 20;

    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + width, y); // Top-right corner
    ctx.lineTo(x + width - height / Math.tan(Math.PI / 4), y + height); // Bottom-right corner
    ctx.lineTo(x - height / Math.tan(Math.PI / 4), y + height); // Bottom-left corner
    ctx.closePath();
    ctx.fill(); // Fills the parallelogram with a color
    
    var x = 65; // X-coordinate of the top-left corner
    var y = 20; // Y-coordinate of the top-left corner
    var width = 15;
    var height = 10;

    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + width, y); // Top-right corner
    ctx.lineTo(x + width - height / Math.tan(Math.PI / 4), y + height); // Bottom-right corner
    ctx.lineTo(x - height / Math.tan(Math.PI / 4), y + height); // Bottom-left corner
    ctx.closePath();
    ctx.fill(); // Fills the parallelogram with a color


    var x = 90; // X-coordinate of the top-left corner
    var y = 20; // Y-coordinate of the top-left corner
    var width = 15;
    var height = 10;

    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + width, y); // Top-right corner
    ctx.lineTo(x + width - height / Math.tan(Math.PI / 4), y + height); // Bottom-right corner
    ctx.lineTo(x - height / Math.tan(Math.PI / 4), y + height); // Bottom-left corner
    ctx.closePath();
    ctx.fill(); // Fills the parallelogram with a color


    // Your access token can be found at: https://ion.cesium.com/tokens.
    // Replace `your_access_token` with your Cesium ion access token.
    Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3ZmFkMmQyYy1kMGZiLTQ5YzctYjYxYy0yOGViOTdmOTYzMzkiLCJpZCI6MTQ2NjIxLCJpYXQiOjE2ODY2NjE4NjF9.G61YyBzmhbKvTCbcw02CoDNCnE6UtAxGhWkfXTy9wqg';

    // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
    const viewer = new Cesium.Viewer('cesiumContainer', {
      terrainProvider: Cesium.createWorldTerrain(),
    });

    // Variables to store flight data and playback information
    let flightData = [];
    let playbackIndex = 0;
    let playbackInterval;
    let isPlaying = false;

    // Function to parse flight data from CSV
    function parseFlightData(csvData) {
      // Remove the header rows
      const lines = csvData.split('\n').slice(26);

      // Process flight data
      flightData = lines.map((line) => {
        const [time, roll, pitch, yaw, latitude, longitude, altitude, xAccel, yAccel, zAccel] = line.split(',');
        return {
          time: parseFloat(time),
          roll: parseFloat(roll),
          pitch: parseFloat(pitch),
          yaw: parseFloat(yaw),
          latitude: parseFloat(latitude),
          longitude: parseFloat(longitude),
          altitude: parseFloat(altitude),
          xAccel: parseFloat(xAccel),
          yAccel: parseFloat(yAccel),
          zAccel: parseFloat(zAccel),
        };
      });


      // Enable the play button and time slider
      const playButton = document.getElementById('playButton');
      const timeSlider = document.getElementById('timeSlider');
      playButton.disabled = false;
      timeSlider.disabled = false;
      timeSlider.max = flightData.length - 1;

    }

    // Function to display flight on the map
    function displayFlight() {
      const canvas = document.getElementById('myCanvas');
      // canvas.style.display = 'block';
      viewer.entities.removeAll();

      if (playbackIndex >= flightData.length) {
        stopPlayback();
        return;
      }

      const startIndex = Math.max(0, playbackIndex - 99);
      const endIndex = playbackIndex;
      // console.log('startIndex :>> ', startIndex);
      // console.log('endIndex :>> ', endIndex);


  
      // function getHeading(currentPosition, nextPosition) {
      //     var lon1 = Cesium.Math.toRadians(currentPosition.longitude);
      //     var lat1 = Cesium.Math.toRadians(currentPosition.latitude);
      //     var lon2 = Cesium.Math.toRadians(nextPosition.longitude);
      //     var lat2 = Cesium.Math.toRadians(nextPosition.latitude);

      //     var y = Math.sin(lon2 - lon1) * Math.cos(lat2);
      //     var x =
      //       Math.cos(lat1) * Math.sin(lat2) -
      //       Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
      //     var heading = Math.atan2(y, x);

      //     return Cesium.Math.toDegrees(heading);
      //   }

      //   // Usage example:
      //   var currentPosition = { longitude: flightData[endIndex].longitude, latitude: flightData[endIndex].latitude };
      //   var nextPosition = { longitude: flightData[endIndex + 1].longitude, latitude: flightData[endIndex + 1].latitude };

      //   var headingAngle = getHeading(currentPosition, nextPosition);


      // const position = Cesium.Cartesian3.fromDegrees(flightData[endIndex].longitude, flightData[endIndex].latitude, flightData[endIndex].altitude);

      //   viewer.entities.add({
      //       name: "image overlay",
      //       position: position,
      //       billboard: {
      //         image: './1/flying.png',
      //         width: 100,
      //         height: 100,
      //         rotation: Cesium.Math.toRadians(headingAngle) + Cesium.Math.toRadians(180),
      //       },
      //     });

      
      for (let i = startIndex; i <= endIndex; i++) {
        const data = flightData[i];
        const position = Cesium.Cartesian3.fromDegrees(data.longitude, data.latitude, data.altitude);

        // viewer.entities.add({
        //     position: position,
        //     point: {
        //       pixelSize: 5,
        //       color: Cesium.Color.RED,
        //     },
        //   });


       
        


        // var targetEntity = new Cesium.Entity({
        //   position: position
        // });

        // viewer.trackedEntity = targetEntity;

        
        const currentPos = Cesium.Cartesian3.fromDegrees(data.longitude, data.latitude, data.altitude); // Current position as a Cartesian3
        const nextData = flightData[i+1];
        const nextPos = Cesium.Cartesian3.fromDegrees(nextData.longitude, nextData.latitude, nextData.altitude); // Next position as a Cartesian3

        // Calculate the heading (rotation around the vertical axis) using the HeadingPitchRoll class
        const currentCartographic = Cesium.Cartographic.fromCartesian(currentPos);
        const nextCartographic = Cesium.Cartographic.fromCartesian(nextPos);

        const currentLon = Cesium.Math.toDegrees(currentCartographic.longitude);
        const currentLat = Cesium.Math.toDegrees(currentCartographic.latitude);
        const nextLon = Cesium.Math.toDegrees(nextCartographic.longitude);
        const nextLat = Cesium.Math.toDegrees(nextCartographic.latitude);

        const deltaLon = nextLon - currentLon;
        const deltaLat = nextLat - currentLat;

        const heading = Math.atan2(deltaLon, deltaLat);

        // Convert from radians to degrees if needed
        const headingDegrees = Cesium.Math.toDegrees(heading);
        canvas.style.transform = "rotate( " + headingDegrees + "deg";

        // var scene = viewer.scene;
        // var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(data.longitude, data.latitude, data.altitude));
        // var model = scene.primitives.add(Cesium.Model.fromGltf({
        //     url : './1/Intergalactic_Spaceships_Version_2.gltf',
        //     modelMatrix : modelMatrix,
        //     scale : 200.0,
        //          point: {
        //     pixelSize: 5,
        //     color: Cesium.Color.RED,
        //   },
        // }));
          // const heading = Cesium.Math.toRadians(135);
          const pitch = data.pitch;
          const roll = data.roll;
          const hpr = new Cesium.HeadingPitchRoll(heading, pitch, roll);
          const orientation = Cesium.Transforms.headingPitchRollQuaternion(
            position,
            hpr
          );

          const entity = viewer.entities.add({
            name: 'air',
            position: position,
            orientation: orientation,
            model: {
              uri: './1/aircraft.gltf',
              minimumPixelSize: 128,
              maximumScale: 20000,
            },
                      point: {
            pixelSize: 5,
            color: Cesium.Color.RED,
          },
          });
          // viewer.trackedEntity = entity;
      //   var modelUri = './1/Cesium_Air.glb';
      //   // var modelUri = 'https://sandcastle.cesium.com/SampleData/models/CesiumAir/Cesium_Air.glb';
      //   var modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(data.longitude, data.latitude, data.altitude));
      //   viewer.entities.add({
      //     position: position,
      //     model: {
      //       uri: modelUri
      //     },
      //     scale: 10000.0,
      //     point: {
      //       pixelSize: 5,
      //       color: Cesium.Color.RED,
      //     },
      //   });
      }

      // Update the time slider position
      const timeSlider = document.getElementById('timeSlider');
      timeSlider.value = playbackIndex;
      console.log('timeSlider.value :>> ', timeSlider.value);

      playbackIndex++;

      //Update the time of display 

    function convertSecondsToTime(seconds) {
        let minutes = Math.floor(seconds / 60);
        let remainingSeconds = seconds % 60;
        
        let milliseconds = Math.floor((remainingSeconds - Math.floor(remainingSeconds)) * 1000);
        remainingSeconds = Math.floor(remainingSeconds);

        if (minutes < 10) {
          minutes = '0' + minutes;
        }

        if (remainingSeconds < 10) {
          remainingSeconds = '0' + remainingSeconds;
        }
        
        if (milliseconds < 10) {
          milliseconds = '00' + milliseconds;
        } else if (milliseconds < 100) {
          milliseconds = '0' + milliseconds;
        }
        
        return minutes + ':' + remainingSeconds + ':' + milliseconds;
      }
      const time = convertSecondsToTime(flightData[playbackIndex].time);
      document.getElementById('displayTime').innerHTML = time;

      // Calculate the time difference between current and next data point
      const currentTime = flightData[playbackIndex - 1].time;
      const nextTime = flightData[playbackIndex].time;
      const timeDifference = nextTime - currentTime;

      // Check if playback is still active
      if (isPlaying && playbackIndex < flightData.length) {
        playbackInterval = setTimeout(displayFlight, timeDifference * 1000);
      } else {
        stopPlayback();
      }
    }

    // Function to start the playback
    function startPlayback() {
      if (flightData.length === 0) {
        alert('Please upload a flight data file.');
        return;
      }

      playbackIndex = parseInt(document.getElementById('timeSlider').value);
      isPlaying = true;

      const playButton = document.getElementById('playButton');
      const pauseButton = document.getElementById('pauseButton');
      const timeSlider = document.getElementById('timeSlider');
      playButton.disabled = true;
      pauseButton.disabled = false;
      timeSlider.disabled = true;

      displayFlight();
    }

    // Function to pause the playback
    function pausePlayback() {
      clearTimeout(playbackInterval);
      isPlaying = false;

      const playButton = document.getElementById('playButton');
      const pauseButton = document.getElementById('pauseButton');
      const timeSlider = document.getElementById('timeSlider');
      playButton.disabled = false;
      pauseButton.disabled = true;
      timeSlider.disabled = false;
    }

    // Function to stop the playback
    function stopPlayback() {
      clearTimeout(playbackInterval);
      playbackIndex = 0;
      isPlaying = false;

      const playButton = document.getElementById('playButton');
      const pauseButton = document.getElementById('pauseButton');
      const timeSlider = document.getElementById('timeSlider');
      playButton.disabled = false;
      pauseButton.disabled = true;
      timeSlider.disabled = false;
      timeSlider.value = 0;
    }

    // Handle file upload event
    function handleFileUpload(event) {
      const file = event.target.files[0];
      const reader = new FileReader();

      reader.onload = function (e) {
        const csvData = e.target.result;
        parseFlightData(csvData);
        stopPlayback();
      };

      reader.readAsText(file);
    }

    // Add event listener to file input
    const fileInput = document.getElementById('fileInput');
    fileInput.addEventListener('change', handleFileUpload);

    // Add event listener to play button
    const playButton = document.getElementById('playButton');
    playButton.addEventListener('click', startPlayback);

    // Add event listener to pause button
    const pauseButton = document.getElementById('pauseButton');
    pauseButton.addEventListener('click', pausePlayback);

    // Add event listener to stop button
    const stopButton = document.getElementById('stopButton');
    stopButton.addEventListener('click', stopPlayback);

    // Add event listener to time slider
    const timeSlider = document.getElementById('timeSlider');
    timeSlider.addEventListener('input', () => {
      playbackIndex = parseInt(timeSlider.value);
      displayFlight();
    });

  </script>
</body>
</html>
